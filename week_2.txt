GIt 
==========================

undoing changes before committing
=====================================

suppose i changed something on file but i want to go back previous file and also 

i don't wanna commit then what should i do?

suppse i write a function which broke the whole script and now i need to go back 
old version my function which was working that time i need this command:

git checkout filename // -p argument pls check

--------------------------------------------------------

git reset 
-------------
suppose i have 3 files hello.py, ex.py, log.py 

git add * 

add all 3 files staged 

but i jus want hello and ex py file.

then want to remove log.py from staged area.

git reset HEAD log.py

problem solved

With reset, you remove changes from the staging area.

You can use git reset dash p to get git to ask you which specific changes you want to reset.

===================================================================================================
Amending Commits
====================

But what if i've already created a commit with the changes that i want to undo? 

When we run git commit --amend, git will take whatever is currently in our staging area and 
run the git commit workflow to overwrite the previous commit.

i created two files. a.py, b.py
2. i add only a.py but don't add b.py
3. in commit message i wrote 'add two files' but i don't 
4. so i need to change commit message 
5. git commit --amend open a nano editor and there we write the new commit message then save, exit
6. Done yoooooo!

While git --amend is okay for fixing up local commits, you shouldn't use it on public commits.
Meaning, those that have been pushed to a public or shared repository.

=================================================================================

Rollbacks
----------------------

But what happens if it's already been snapshotted by Git 
Let's say you host to Git repository on a company server that contains 
all kinds of useful automation scripts that you and your coworkers use.

One morning before coffee, you make a few changes to one of these scripts and commit the updated files.
A few hours later, you start to receive tickets from users indicating some part of the script is broken.
Oh, you could look at the code you updated to see if you can spot the bug.
But more tickets are pouring in and you want to fix the problem as fast as possible.

You decided it's time for a rollback.
Git revert doesn't just mean undo.Instead, it creates a commit that contains the inverse of all the 
changes made in the bad commit in order to cancel them out.
For example, if a particular line was added in the bad commit, then in the reverted commit, the same line will be deleted.

This way you get the effect of having undone the changes, but the history of the commits in the project remains consistent leaving a record of exactly what happened.
So git revert will create a new commit, that is the opposite of everything in the given commit.
Since we can think of head as a pointer to the snapshot of your current commit, when we pass head to the revert command we tell Git to rewind that current commit,

git revert HEAD --> opens a editor 


git revert commit_id 

---------------------------=========================================================

Branching and Merging 
=====================================

So what is a branch? What is it used for? In Git, a branch at the most basic level is just a pointer to a particular commit.
The default branch that Git creates for you when a new repository initialized is called master.
The master branch is commonly used to represent the known good state of a project.
You can think of a Git project as an assignment your teacher gives you in a class.

You do all your work on the assignment in a set of notebooks, each notebook representing a different branch.


When you want to add a feature or fix something, you can create a new branch and do your development there
You can merge back into the master branch, when you've got something you like, or discard your changes without negative impact if they don't work out.
































